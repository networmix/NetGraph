# Test scenario 3: Complex 3-tier Clos network with nested blueprints
# Tests advanced blueprint nesting, node/link overrides, and capacity probing
seed: 3003

blueprints:
  brick_2tier:
    groups:
      t1:
        node_count: 4
        name_template: t1-{node_num}
      t2:
        node_count: 4
        name_template: t2-{node_num}

    adjacency:
      - source: /t1
        target: /t2
        pattern: mesh
        link_params:
          capacity: 100.0 # 100 Gb/s tier1-tier2 links
          cost: 1

  3tier_clos:
    groups:
      b1:
        use_blueprint: brick_2tier
      b2:
        use_blueprint: brick_2tier
      spine:
        node_count: 16
        name_template: t3-{node_num}

    adjacency:
      - source: b1/t2
        target: spine
        pattern: one_to_one
        link_params:
          capacity: 400.0 # 400 Gb/s tier2-spine links
          cost: 1
      - source: b2/t2
        target: spine
        pattern: one_to_one
        link_params:
          capacity: 400.0 # 400 Gb/s tier2-spine links
          cost: 1

network:
  name: "3tier_clos_network"
  version: 1.0

  groups:
    my_clos1:
      use_blueprint: 3tier_clos

    my_clos2:
      use_blueprint: 3tier_clos

  adjacency:
    - source: my_clos1/spine
      target: my_clos2/spine
      pattern: one_to_one
      link_params:
        capacity: 400.0 # 400 Gb/s inter-Clos spine links
        cost: 1

  link_overrides:
    # Overriding a link between two spine devices.
    - source: my_clos1/spine/t3-1$
      target: my_clos2/spine/t3-1$
      link_params:
        capacity: 200.0 # Override capacity to 200 Gb/s
        cost: 1

    # Set risk groups and hw_component on all spine to spine links
    - source: .*/spine/.*
      target: .*/spine/.*
      any_direction: True
      link_params:
        risk_groups: ["SpineSRG"]
        attrs:
          hardware:
            source: {component: "400G-LR4", count: 1}
            target: {component: "400G-LR4", count: 1}

  # Node overrides for risk groups and hardware types
  node_overrides:
    - path: my_clos1/b1/t1
      risk_groups: ["clos1-b1t1-SRG"]
      attrs:
        hw_component: "LeafHW-A"

    - path: my_clos2/b2/t1
      risk_groups: ["clos2-b2t1-SRG"]
      attrs:
        hw_component: "LeafHW-B"

    - path: my_clos1/spine/t3.*
      risk_groups: ["clos1-spine-SRG"]
      attrs:
        hw_component: "SpineHW"

    - path: my_clos2/spine/t3.*
      risk_groups: ["clos2-spine-SRG"]
      attrs:
        hw_component: "SpineHW"

workflow:
  - step_type: BuildGraph
    name: build_graph

  # Forward direction analysis - equivalent to capacity_probe
  - step_type: CapacityEnvelopeAnalysis
    name: capacity_analysis_forward
    source_path: my_clos1/b.*/t1
    sink_path: my_clos2/b.*/t1
    mode: combine
    shortest_path: true
    flow_placement: PROPORTIONAL
    iterations: 1
    baseline: false
    failure_policy: null

  # Reverse direction analysis - equivalent to capacity_probe with probe_reverse
  - step_type: CapacityEnvelopeAnalysis
    name: capacity_analysis_reverse
    source_path: my_clos2/b.*/t1
    sink_path: my_clos1/b.*/t1
    mode: combine
    shortest_path: true
    flow_placement: PROPORTIONAL
    iterations: 1
    baseline: false
    failure_policy: null

  # Forward direction with EQUAL_BALANCED - equivalent to capacity_probe2
  - step_type: CapacityEnvelopeAnalysis
    name: capacity_analysis_forward_balanced
    source_path: my_clos1/b.*/t1
    sink_path: my_clos2/b.*/t1
    mode: combine
    shortest_path: true
    flow_placement: EQUAL_BALANCED
    iterations: 1
    baseline: false
    failure_policy: null

  # Reverse direction with EQUAL_BALANCED - equivalent to capacity_probe2 with probe_reverse
  - step_type: CapacityEnvelopeAnalysis
    name: capacity_analysis_reverse_balanced
    source_path: my_clos2/b.*/t1
    sink_path: my_clos1/b.*/t1
    mode: combine
    shortest_path: true
    flow_placement: EQUAL_BALANCED
    iterations: 1
    baseline: false
    failure_policy: null
