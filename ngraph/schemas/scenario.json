{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://netgraph.dev/schemas/scenario.json",
  "title": "NetGraph Scenario Schema",
  "description": "JSON Schema for NetGraph network scenario YAML files",
  "type": "object",
  "properties": {
    "vars": {
      "type": "object",
      "description": "YAML anchors and variable definitions for reuse throughout the scenario"
    },
    "seed": {
      "type": "integer",
      "description": "Master seed for reproducible random operations across the scenario"
    },
    "network": {
      "type": "object",
      "description": "Network topology definition",
      "properties": {
        "name": {
          "type": "string",
          "description": "Network name"
        },
        "version": {
          "oneOf": [
            {"type": "string"},
            {"type": "number"}
          ],
          "description": "Network version"
        },
        "nodes": {
          "type": "object",
          "description": "Node definitions",
          "patternProperties": {
            "^[a-zA-Z0-9_-]+$": {
              "type": "object",
              "properties": {
                "attrs": {
                  "type": "object",
                  "description": "Node attributes. Supports 'hardware': {component, count} for node hardware component definition.",
                  "properties": {
                    "hardware": {
                      "type": "object",
                      "properties": {
                        "component": {"type": "string"},
                        "count": {"type": "number", "minimum": 0}
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": true
                },
                "disabled": {
                  "type": "boolean",
                  "description": "Whether the node is disabled"
                },
                "risk_groups": {
                  "type": "array",
                  "items": {"type": "string"},
                  "description": "Risk groups this node belongs to"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "links": {
          "type": "array",
          "description": "Link definitions",
          "items": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "description": "Source node name"
              },
              "target": {
                "type": "string",
                "description": "Target node name"
              },
              "link_params": {
                "type": "object",
                "properties": {
                  "capacity": {
                    "type": "number",
                    "description": "Link capacity"
                  },
                  "cost": {
                    "type": "number",
                    "description": "Link cost"
                  },
                  "disabled": {
                    "type": "boolean",
                    "description": "Whether the link is disabled"
                  },
                  "risk_groups": {
                    "type": "array",
                    "items": {"type": "string"},
                    "description": "Risk groups this link belongs to"
                  },
                  "attrs": {
                    "type": "object",
                    "description": "Additional link attributes. Supports per-end hardware under 'hardware': {src|lhs|source: {component, count}, dst|rhs|target: {component, count}}",
                    "properties": {
                      "hardware": {
                        "type": "object",
                        "properties": {
                          "source": {
                            "type": "object",
                            "properties": {
                              "component": {"type": "string"},
                              "count": {"type": "number", "minimum": 0},
                              "exclusive": {"type": "boolean"}
                            },
                            "additionalProperties": false
                          },
                          "target": {
                            "type": "object",
                            "properties": {
                              "component": {"type": "string"},
                              "count": {"type": "number", "minimum": 0},
                              "exclusive": {"type": "boolean"}
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": true
                  }
                },
                "additionalProperties": false
              },
              "link_count": {
                "type": "integer",
                "minimum": 1,
                "description": "Number of parallel links to create"
              }
            },
            "required": ["source", "target"],
            "additionalProperties": false
          }
        },
        "groups": {
          "type": "object",
          "description": "Node group definitions for blueprint expansion. NOTE: Runtime validation enforces that groups with 'use_blueprint' can only have {use_blueprint, parameters, attrs, disabled, risk_groups}, while groups without 'use_blueprint' can only have {node_count, name_template, attrs, disabled, risk_groups}.",
          "patternProperties": {
            "^[a-zA-Z0-9_\\[\\]-]+$": {
              "type": "object",
              "properties": {
                "use_blueprint": {"type": "string"},
                "parameters": {"type": "object"},
                "node_count": {"type": "integer", "minimum": 1},
                "name_template": {"type": "string"},
                "attrs": {"type": "object"},
                "disabled": {"type": "boolean"},
                "risk_groups": {
                  "type": "array",
                  "items": {"type": "string"}
                }
              },
              "additionalProperties": false
            }
          }
        },
        "adjacency": {
          "type": "array",
          "description": "Adjacency rules for blueprint expansion",
          "items": {
            "type": "object",
            "properties": {
              "source": {
                "oneOf": [
                  {"type": "string"},
                  {
                    "type": "object",
                    "properties": {
                      "path": {"type": "string"},
                      "match": {
                        "type": "object",
                        "properties": {
                          "logic": {"type": "string", "enum": ["and", "or"]},
                          "conditions": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "attr": {"type": "string"},
                                "operator": {
                                  "type": "string",
                                  "enum": [
                                    "==",
                                    "!=",
                                    ">",
                                    "<",
                                    ">=",
                                    "<=",
                                    "contains",
                                    "not_contains",
                                    "any_value",
                                    "no_value"
                                  ]
                                },
                                "value": {}
                              },
                              "required": ["attr", "operator"],
                              "additionalProperties": false
                            }
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "required": ["path"],
                    "additionalProperties": false
                  }
                ]
              },
              "target": {
                "oneOf": [
                  {"type": "string"},
                  {
                    "type": "object",
                    "properties": {
                      "path": {"type": "string"},
                      "match": {
                        "type": "object",
                        "properties": {
                          "logic": {"type": "string", "enum": ["and", "or"]},
                          "conditions": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "attr": {"type": "string"},
                                "operator": {
                                  "type": "string",
                                  "enum": [
                                    "==",
                                    "!=",
                                    ">",
                                    "<",
                                    ">=",
                                    "<=",
                                    "contains",
                                    "not_contains",
                                    "any_value",
                                    "no_value"
                                  ]
                                },
                                "value": {}
                              },
                              "required": ["attr", "operator"],
                              "additionalProperties": false
                            }
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "required": ["path"],
                    "additionalProperties": false
                  }
                ]
              },
              "pattern": {
                "type": "string"
              },
              "link_count": {"type": "integer", "minimum": 1},
              "link_params": {
                "type": "object",
                "properties": {
                  "capacity": {"type": "number"},
                  "cost": {"type": "number"},
                  "disabled": {"type": "boolean"},
                  "risk_groups": {"type": "array", "items": {"type": "string"}},
                  "attrs": {"type": "object"}
                },
                "additionalProperties": false
              },
              "expand_vars": {
                "type": "object",
                "description": "Variable substitutions for adjacency expansion",
                "additionalProperties": {
                  "type": "array",
                  "items": {}
                }
              },
              "expansion_mode": {
                "type": "string",
                "enum": ["cartesian", "zip"],
                "description": "How to combine expand_vars lists"
              }
            },
            "required": ["source", "target"],
            "additionalProperties": false
          }
        },
        "node_overrides": {
          "type": "array",
          "description": "Node override rules",
          "items": {
            "type": "object",
            "properties": {
              "path": {"type": "string"},
              "attrs": {"type": "object"},
              "disabled": {"type": "boolean"},
              "risk_groups": {
                "type": "array",
                "items": {"type": "string"}
              }
            },
            "required": ["path"],
            "additionalProperties": false
          }
        },
        "link_overrides": {
          "type": "array",
          "description": "Link override rules",
          "items": {
            "type": "object",
            "properties": {
              "source": {"type": "string"},
              "target": {"type": "string"},
              "any_direction": {"type": "boolean"},
              "link_params": {
                "type": "object",
                "properties": {
                  "capacity": {"type": "number"},
                  "cost": {"type": "number"},
                  "disabled": {"type": "boolean"},
                  "risk_groups": {
                    "type": "array",
                    "items": {"type": "string"}
                  },
                  "attrs": {"type": "object"}
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    },
    "blueprints": {
      "type": "object",
      "description": "Reusable network blueprint definitions",
      "patternProperties": {
        "^[a-zA-Z0-9_-]+$": {
          "type": "object",
          "properties": {
            "groups": {
              "type": "object",
              "description": "Node group definitions for blueprint expansion. NOTE: Runtime validation enforces that groups with 'use_blueprint' can only have {use_blueprint, parameters, attrs, disabled, risk_groups}, while groups without 'use_blueprint' can only have {node_count, name_template, attrs, disabled, risk_groups}.",
              "patternProperties": {
                "^[a-zA-Z0-9_\\[\\]-]+$": {
                  "type": "object",
                  "properties": {
                    "use_blueprint": {"type": "string"},
                    "parameters": {"type": "object"},
                    "node_count": {"type": "integer", "minimum": 1},
                    "name_template": {"type": "string"},
                    "attrs": {"type": "object"},
                    "disabled": {"type": "boolean"},
                    "risk_groups": {
                      "type": "array",
                      "items": {"type": "string"}
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "adjacency": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "source": {
                    "oneOf": [
                      {"type": "string"},
                      {
                        "type": "object",
                        "properties": {
                          "path": {"type": "string"},
                          "match": {
                            "type": "object",
                            "properties": {
                              "logic": {"type": "string", "enum": ["and", "or"]},
                              "conditions": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "attr": {"type": "string"},
                                    "operator": {
                                      "type": "string",
                                      "enum": [
                                        "==",
                                        "!=",
                                        ">",
                                        "<",
                                        ">=",
                                        "<=",
                                        "contains",
                                        "not_contains",
                                        "any_value",
                                        "no_value"
                                      ]
                                    },
                                    "value": {}
                                  },
                                  "required": ["attr", "operator"],
                                  "additionalProperties": false
                                }
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "required": ["path"],
                        "additionalProperties": false
                      }
                    ]
                  },
                  "target": {
                    "oneOf": [
                      {"type": "string"},
                      {
                        "type": "object",
                        "properties": {
                          "path": {"type": "string"},
                          "match": {
                            "type": "object",
                            "properties": {
                              "logic": {"type": "string", "enum": ["and", "or"]},
                              "conditions": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "attr": {"type": "string"},
                                    "operator": {
                                      "type": "string",
                                      "enum": [
                                        "==",
                                        "!=",
                                        ">",
                                        "<",
                                        ">=",
                                        "<=",
                                        "contains",
                                        "not_contains",
                                        "any_value",
                                        "no_value"
                                      ]
                                    },
                                    "value": {}
                                  },
                                  "required": ["attr", "operator"],
                                  "additionalProperties": false
                                }
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "required": ["path"],
                        "additionalProperties": false
                      }
                    ]
                  },
                  "pattern": {
                    "type": "string",
                    "enum": ["mesh", "one_to_one"]
                  },
                  "link_count": {"type": "integer", "minimum": 1},
                  "link_params": {
                    "type": "object",
                    "properties": {
                      "capacity": {"type": "number"},
                      "cost": {"type": "number"},
                      "disabled": {"type": "boolean"},
                      "risk_groups": {
                        "type": "array",
                        "items": {"type": "string"}
                      },
                      "attrs": {"type": "object"}
                    },
                    "additionalProperties": false
                  },
                  "expand_vars": {
                    "type": "object",
                    "description": "Variable substitutions for adjacency expansion",
                    "additionalProperties": {
                      "type": "array",
                      "items": {}
                    }
                  },
                  "expansion_mode": {
                    "type": "string",
                    "enum": ["cartesian", "zip"],
                    "description": "How to combine expand_vars lists"
                  }
                },
                "required": ["source", "target"],
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "risk_groups": {
      "type": "array",
      "description": "Risk group definitions for failure modeling",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique risk group name"
          },
          "disabled": {
            "type": "boolean",
            "description": "Whether this risk group is disabled on load"
          },
          "attrs": {
            "type": "object",
            "description": "Additional metadata for the risk group"
          },
          "children": {
            "type": "array",
            "description": "Nested child risk groups",
            "items": {
              "$ref": "#/properties/risk_groups/items"
            }
          }
        },
        "required": ["name"],
        "additionalProperties": false
      }
    },
    "failure_policy_set": {
      "type": "object",
      "description": "Named failure policies for simulation",
      "patternProperties": {
        "^[a-zA-Z0-9_-]+$": {
          "type": "object",
          "properties": {
            "attrs": {
              "type": "object",
              "description": "Policy metadata"
            },
            "fail_risk_groups": {
              "type": "boolean",
              "description": "Whether to fail risk groups"
            },
            "fail_risk_group_children": {
              "type": "boolean",
              "description": "Whether to recursively fail risk group children"
            },
            "modes": {
              "type": "array",
              "description": "Weighted mode list; exactly one mode is chosen per iteration.",
              "items": {
                "type": "object",
                "properties": {
                  "weight": {"type": "number", "minimum": 0},
                  "attrs": {"type": "object"},
                  "rules": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "entity_scope": {
                          "type": "string",
                          "enum": ["node", "link", "risk_group"],
                          "description": "What entities this rule applies to"
                        },
                        "conditions": {
                          "type": "array",
                          "description": "Conditions that must be met",
                          "items": {
                            "type": "object",
                            "properties": {
                              "attr": {"type": "string"},
                              "operator": {
                                "type": "string",
                                "enum": ["==", "!=", ">", "<", ">=", "<=", "in", "not_in"]
                              },
                              "value": {}
                            },
                            "required": ["attr", "operator", "value"],
                            "additionalProperties": false
                          }
                        },
                        "logic": {
                          "type": "string",
                          "enum": ["and", "or"],
                          "description": "Logic for combining conditions"
                        },
                        "rule_type": {
                          "type": "string",
                          "enum": ["all", "choice", "random"],
                          "description": "How to apply the rule"
                        },
                        "probability": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1,
                          "description": "Probability for random rule type"
                        },
                        "count": {
                          "type": "integer",
                          "minimum": 1,
                          "description": "Number of entities to affect for choice rule type"
                        },
                        "weight_by": {
                          "type": "string",
                          "description": "Attribute name used for weighted sampling in choice mode"
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                },
                "required": ["weight", "rules"],
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "traffic_matrix_set": {
      "type": "object",
      "description": "Named traffic demand matrices",
      "patternProperties": {
        "^[a-zA-Z0-9_-]+$": {
          "type": "array",
          "description": "List of traffic demands",
          "items": {
            "type": "object",
            "properties": {
              "source_path": {
                "type": "string",
                "description": "Source node pattern"
              },
              "sink_path": {
                "type": "string",
                "description": "Sink node pattern"
              },
              "demand": {
                "type": "number",
                "description": "Traffic demand amount"
              },
              "priority": {"type": "integer", "description": "Priority class"},
              "demand_placed": {"type": "number", "description": "Pre-placed demand amount"},
              "mode": {"type": "string", "description": "Expansion mode for sub-demands"},
              "flow_policy_config": {"description": "Routing policy config. Accepts enum name (string), enum value (integer), object, or null.", "oneOf": [{"type": "string"}, {"type": "integer"}, {"type": "object"}, {"type": "null"}]},
              "flow_policy": {"type": "object", "description": "Inline FlowPolicy definition"},
              "attrs": {"type": "object", "description": "Additional demand attributes"}
            },
            "required": ["source_path", "sink_path", "demand"],
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    },
    "components": {
      "type": "object",
      "description": "Hardware component library",
      "patternProperties": {
        "^[a-zA-Z0-9_\\-\\+]+$": {
          "type": "object",
          "properties": {
            "component_type": {"type": "string"},
            "description": {"type": "string"},
            "capex": {"type": "number"},
            "power_watts": {"type": "number"},
            "power_watts_max": {"type": "number"},
            "capacity": {"type": "number"},
            "ports": {"type": "integer"},
            "count": {"type": "integer"},
            "attrs": {"type": "object"},
            "children": {"type": "object", "patternProperties": {"^[a-zA-Z0-9_\\-\\+]+$": {"type": "object", "additionalProperties": true}}}
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "workflow": {
      "type": "array",
      "description": "Workflow steps to execute",
      "items": {
        "type": "object",
        "properties": {
          "step_type": {"type": "string", "description": "Type of workflow step"},
          "name": {"type": "string", "description": "Step name"}
        },
        "required": ["step_type"],
        "additionalProperties": true
      }
    }
  },
  "additionalProperties": false
}
